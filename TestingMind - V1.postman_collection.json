{
	"info": {
		"_postman_id": "e6bf6f51-3d12-4cf3-92c4-da2a5da96bd8",
		"name": "TestingMind - V1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "helpers",
			"item": [
				{
					"name": "clear globals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fabad11-779f-432d-8db2-381a6500db3c",
								"exec": [
									"pm.globals.clear();",
									"console.log(`Globals cleared`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f91246b2-1663-442d-8112-90513e7e5375",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exploring",
			"item": [
				{
					"name": "blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bf8bf81-65b9-49a1-996b-ff7a02e2a615",
								"exec": [
									"eval(pm.globals.get(`codeLibrary`));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0228e192-d2e6-4ea2-8b3d-8a315bc8d208",
								"exec": [
									"pm.globals.set(`codeLibrary`,`",
									"//=== Code Library === (an x is ok here whilst editing)",
									"// put a backtick beginning of the line above for syntax highlighting",
									"// but remove it before running it",
									"",
									"function checkInfoResponse(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"response contains info\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        ",
									"        //assertion",
									"        pm.expect(resp.info).to.be.an('array');",
									"        ",
									"        resp.info.forEach(",
									"            line => {pm.expect(line).to.be.a('string')}",
									"            );",
									"    });",
									"}",
									"",
									"console.log('Code Library loaded');",
									"",
									"`); //end of code library, an x is ok here whilst editing"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d03d6504-c542-4fba-b42c-7e8c3e65d9f6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"",
									"    //assertion",
									"    pm.expect(resp.info).to.be.an('array');",
									"",
									"    resp.info.forEach(",
									"        line => { pm.expect(line).to.be.a('string') }",
									"    );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "rates/info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e989951e-2817-4b98-a445-1e76fd84a94a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    ",
									"    //assertion",
									"    pm.expect(resp.info).to.be.an('array');",
									"    ",
									"    resp.info.forEach(",
									"        line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rates/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rates",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8000508a-ba11-41fc-90a0-4e9e95989e3e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// check each rate is valid",
									"pm.test(\"All rate objects are valid\", function () {",
									"    const rates = pm.response.json(); //this can throw exceptions",
									"    ",
									"    rates.forEach(rate => {",
									"        pm.expect(rate.rateId).to.be.a('number');",
									"        pm.expect(rate.accountType).to.be.oneOf(['cheque','savings','overdraft','loanFixed12Months','loanFixed24Months']);",
									"        pm.expect(rate.rate).to.be.a('number').and.be.within(0,100);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rates",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "person route Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a1cf0df-c23a-4ed7-81d6-4a566a632d08",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    ",
									"    //assertion",
									"    pm.expect(resp.info).to.be.an('array');",
									"    ",
									"    resp.info.forEach(",
									"        line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/person",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "person login route info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80281797-016e-47b5-b1c8-36c354a6934f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    ",
									"    //assertion",
									"    pm.expect(resp.info).to.be.an('array');",
									"    ",
									"    resp.info.forEach(",
									"        line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60280381-5dd1-4513-b18b-2c45478b85d7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login response contains sessionId\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"",
									"    //assertion",
									"    pm.expect(resp.sessionId).to.be.a('string');",
									"",
									"    //save",
									"    pm.globals.set('sessionId', resp.sessionId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51d49fcb-3338-4c65-9dfc-9f699738e13e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Grace Hopper\",\n\t\"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User's accounts List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bc0514d-96c3-4381-a247-dc6b2a9d021c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response contains array of valid accounts\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    ",
									"    pm.expect(resp).to.be.an('array');",
									"    ",
									"    resp.forEach(account => {",
									"        pm.expect(account.accountId).to.be.a(`number`);",
									"        pm.expect(account.type).to.be.oneOf(['cheque','savings','overdraft','loanFixed12Months','loanFixed24Months']);",
									"        pm.expect(account.number).to.be.a(`string`).and.have.lengthOf(22);",
									"        pm.expect(account.name).to.be.a(`string`);",
									"        pm.expect(account.balance).to.be.a(`number`);",
									"        pm.expect(account.rateId).to.be.a(`number`);",
									"        pm.expect(account.links).to.be.an(`array`);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/accounts",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "One Rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de712d91-9c08-44e6-a274-d94a7ef10a07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rate/3",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rate",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "One user's account's transactions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "811876b5-e9cd-4b6f-b785-1e7496cb4b40",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/account/2/transactions",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"account",
								"2",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a1d84a0-61a7-400a-842d-15d25e17d234",
								"exec": [
									"pm.globals.unset('sessionId');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5474b7e4-0d19-4dba-90fb-426df63cf50e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "codeLibary info check",
			"item": [
				{
					"name": "codeLibrary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788b00da-9246-4076-a90e-d87ce1aabe41",
								"exec": [
									"eval(pm.globals.get(`codeLibrary`));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3754934a-3bc8-44fe-818e-4d51678638bc",
								"exec": [
									"pm.globals.set(`codeLibrary`, `",
									";//=== Code Library === (a code error is ok here whilst editing)",
									"// put a backtick beginning of the line above for syntax highlighting",
									"// but remove it before running it",
									"",
									"function checkInfoResponse(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"response contains info\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        ",
									"        //assertion",
									"        pm.expect(resp.info).to.be.an('array');",
									"        ",
									"        resp.info.forEach(",
									"            line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"    });",
									"}",
									"",
									"function checkInfoResponseV2(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.test(\"response contains info\", function () {",
									"        pm.expect(resp.info).to.be.an('array');",
									"        resp.info.forEach(",
									"            line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"    });",
									"",
									"    pm.test(\"response contains requests\", function () {",
									"        pm.expect(resp.requests).to.be.an('array');",
									"        resp.info.forEach(",
									"            line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"    });",
									"",
									"}",
									"",
									"console.log('Code Library loaded');",
									"",
									"`); //end of code library, an x is ok here whilst editing"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info orig",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31d0c290-a932-4afb-b2a7-ad7233ddb5ec",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    ",
									"    //assertion",
									"    pm.expect(resp.info).to.be.an('array');",
									"    ",
									"    resp.info.forEach(",
									"        line => {pm.expect(line).to.be.a('string')}",
									"        );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info using codeLibrary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ebbae7b-a628-4a90-b4d5-c33c1f938af7",
								"exec": [
									"eval(pm.globals.get(`codeLibrary`));",
									"checkInfoResponse();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "rates/info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6882e84-1810-45cf-83ec-ca8381ce5a19",
								"exec": [
									"eval(pm.globals.get(`codeLibrary`));",
									"checkInfoResponse();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rates/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rates",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "person route Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d8b6ca-1e0e-429a-a5b6-e2c72d12a7b7",
								"exec": [
									"eval(pm.globals.get(`codeLibrary`));",
									"checkInfoResponse();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/person",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "person login route info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdc4edda-17b8-4049-9629-d2108fe99f3c",
								"exec": [
									"eval(pm.globals.get(`codeLibrary`));",
									"checkInfoResponse();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "codeLibrary with Account class",
			"item": [
				{
					"name": "Code Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dde4e036-99a6-4466-a04c-db5aafcac8a6",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"pm.test(\"API is up\", function () {",
									"    pm.response.to.have.status(200);",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.APIstatus).to.eql('up');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9bb95b8f-4d0e-4b55-8255-3d8f6cea2653",
								"exec": [
									"pm.globals.set(`codeLibrary`, `",
									"; //=== Code Library === (an x is ok here whilst editing)",
									"// put a backtick beginning of the line above for syntax highlighting",
									"// but remove it before running it",
									"const debugging = true;",
									"",
									"function checkInfoResponse(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"response contains info\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.info).to.be.an('array');",
									"        resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"    pm.test(\"response contains list of requests\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.requests).to.be.an('array');",
									"        resp.requests.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"}",
									"const validAccountTypes = [",
									"    'cheque',",
									"    'savings',",
									"    'overdraft',",
									"    'loanFixed12Months',",
									"    'loanFixed24Months'",
									"];",
									"class Account {",
									"    constructor(accountObj){",
									"        Object.assign(this,accountObj);",
									"    }",
									"    isValid() {",
									"        try{",
									"            pm.expect(this.accountId).to.be.a('number');",
									"            pm.expect(this.type).to.be.oneOf(validAccountTypes);",
									"            pm.expect(this.number).to.be.a('string').and.have.lengthOf(22);",
									"            pm.expect(this.name).to.be.a('string');",
									"            pm.expect(this.balance).to.be.a('number');",
									"            pm.expect(this.rateId).to.be.a('number');",
									"            pm.expect(this.links).to.be.an('array');",
									"            return true;",
									"        }catch(err){",
									"            console.log('Account.valid(): Error - ' + err);",
									"            console.log('accountObj',accountObj);",
									"            return false;",
									"        }",
									"    }",
									"}",
									"",
									"function handleGetAccountsResponse(response){",
									"    if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"    ",
									"    try{ var resp = response.json();} catch(err){console.log('Error: JSON Conversion error - ' + err );} ",
									"",
									"    pm.test(\"GetAccounts response code is 200\", function () {",
									"        response.to.have.status(200);",
									"        pm.test(\"GetAccounts response contains array of valid accounts\", function () {",
									"            pm.expect(resp).to.be.an('array');",
									"            resp.forEach((receivedAccount) => {",
									"                let account = new Account(receivedAccount);",
									"                pm.expect(account.isValid()).to.be.true;",
									"            });",
									"        });",
									"        ",
									"    });",
									"}",
									"`); //end of code library, an x is ok here whilst editing"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cb47a15-eb95-40d1-bc0f-dca9d8b87bf5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login response contains sessionId\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    ",
									"    //assertion",
									"    pm.expect(resp.sessionId).to.be.a('string');",
									"    ",
									"    //save",
									"    pm.globals.set('sessionId',resp.sessionId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "381a746a-907d-4313-ae05-b96d96eb05e0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Grace Hopper\",\n\t\"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User's accounts List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d8b1151-0421-465a-be4e-6f19116002d7",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"handleGetAccountsResponse(pm.response);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/accounts",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dda9723-08d8-4456-90ba-66923b9a012f",
								"exec": [
									"pm.globals.unset('sessionId');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41e9e30a-9f5e-4f68-a17a-c20703c68866",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "codeLibrary with User class",
			"item": [
				{
					"name": "Code Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8aafc8f-3073-4bf7-9f90-9e6f9be351e8",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"pm.test(\"API is up\", function () {",
									"    pm.response.to.have.status(200);",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.APIstatus).to.eql('up');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "21f57858-be5f-4205-b71a-cdc36cf5e86f",
								"exec": [
									"pm.globals.set(`codeLibrary`,`",
									"; //=== Code Library === (an x is ok here whilst editing)",
									"// put a backtick beginning of the line above for syntax highlighting",
									"// but remove it before running it",
									"const debugging = true;",
									"",
									"function checkInfoResponse(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"response contains info\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.info).to.be.an('array');",
									"        resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"    pm.test(\"response contains list of requests\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.requests).to.be.an('array');",
									"        resp.requests.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"}",
									"",
									"class Account {",
									"    constructor(accountObj){",
									"        if(!accountObj) throw new Error('Account.constructor(): Missing accountObj'); // must have an accountObj",
									"        Object.assign(this,accountObj);",
									"    }",
									"    valid() {",
									"        try{",
									"            pm.expect(this.accountId).to.be.a('number');",
									"            pm.expect(this.type).to.be.oneOf(['cheque','savings','overdraft','loanFixed12Months','loanFixed24Months']);",
									"            pm.expect(this.number).to.be.a('string').and.have.lengthOf(22);",
									"            pm.expect(this.name).to.be.a('string');",
									"            pm.expect(this.balance).to.be.a('number');",
									"            pm.expect(this.rateId).to.be.a('number');",
									"            pm.expect(this.links).to.be.an('array');",
									"            return true;",
									"        }catch(err){",
									"            console.log('Account.valid(): Error - ' + err);",
									"            console.log('accountObj',accountObj);",
									"            return false;",
									"        }",
									"    }",
									"    setGlobalsFor(req){",
									"        let props;",
									"        switch(req){",
									"            case 'rateRequest': props = [ \"rateId\" ]; break;",
									"            case 'transactionsRequest': props = [ \"accountId\" ]; break;",
									"        }",
									"        props.forEach(property => {",
									"            this[property] && pm.globals.set(property,this[property]);",
									"        });",
									"    }",
									"}",
									"",
									"var User = class {",
									"    constructor({name, password} = {name: \"\", password:\"\"}){",
									"        this._name = name;",
									"        this._password = password;",
									"    }",
									"    ",
									"    get name() {return this._name;}",
									"    set name(val) {console.log('Only set the name when constructing user');}",
									"",
									"    get password() {return this._password;}    ",
									"    set password(val) {console.log('Only set the password when constructing user');}",
									"",
									"    setGlobalsFor(req){",
									"        let props;",
									"        switch(req){",
									"            case 'login': props = [ \"name\", \"password\" ]; break;",
									"            case 'protectedRequests': props = [ \"sessionId\" ]; break;",
									"        }",
									"        props.forEach(property => {",
									"            this['_'+property] && pm.globals.set(property,this['_'+property]);",
									"        });",
									"    }",
									"    ",
									"    static handleLoginResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        try{ var resp = response.json();} catch(err){console.log('Error: JSON Conversion error - ' + err );} ",
									"        ",
									"        pm.test(\"Login response code is 200\", function () {",
									"            response.to.have.status(200);",
									"",
									"            pm.test(\"Login response contains sessionId\", function () {",
									"                pm.expect(resp.sessionId).to.be.a('string');",
									"                resp.sessionId && pm.globals.set('sessionId',resp.sessionId);",
									"            });",
									"            ",
									"        });",
									"    }",
									"",
									"    static handleLogoutResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        pm.test(\"Logout response code is 204\", function () {",
									"            response.to.have.status(204);",
									"        });",
									"        ",
									"        pm.globals.unset('sessionId');",
									"    }",
									"} // end of User class",
									"",
									"`); //end of code library, an x is ok here whilst editing"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edda8d2e-1314-4239-a2f9-d4bb83bf4d64",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"User.handleLoginResponse(pm.response);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3ecea5f-e7f7-4b37-8dd2-729e2aa2cae7",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"var currentUser = new User({ \"name\":\"Grace Hopper\", \"password\": \"Password123\" });",
									"currentUser.setGlobalsFor('login');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{name}}\",\n\t\"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9b1e6e1-1c72-415f-9aa2-4f209c6ae2e4",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"User.handleLogoutResponse(pm.response);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "afc18b71-7aa3-4636-aeb9-d8ad5bdeb41e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "codeLibrary with persisted User class",
			"item": [
				{
					"name": "Code Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9773c243-fc3a-4c04-bb6a-f34434956ab6",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"pm.test(\"API is up\", function () {",
									"    pm.response.to.have.status(200);",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.APIstatus).to.eql('up');",
									"});",
									"",
									"currentUser && currentUser.clearSession();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6fb268fc-a36d-4366-9fe7-3bbf650a927d",
								"exec": [
									"pm.globals.set(`codeLibrary`, `",
									"; //=== Code Library === (an x is ok here whilst editing)",
									"// put a backtick beginning of the line above for syntax highlighting",
									"// but remove it before running it",
									"const debugging = false;",
									"",
									"function checkInfoResponse(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"response contains info\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.info).to.be.an('array');",
									"        resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"    pm.test(\"response contains list of requests\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.requests).to.be.an('array');",
									"        resp.requests.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"}",
									"",
									"class Account {",
									"    constructor(accountObj){",
									"        if(!accountObj) throw new Error('Account.constructor(): Missing accountObj'); // must have an accountObj",
									"        Object.assign(this,accountObj);",
									"    }",
									"    valid() {",
									"        try{",
									"            pm.expect(this.accountId).to.be.a('number');",
									"            pm.expect(this.type).to.be.oneOf(['cheque','savings','overdraft','loanFixed12Months','loanFixed24Months']);",
									"            pm.expect(this.number).to.be.a('string').and.have.lengthOf(22);",
									"            pm.expect(this.name).to.be.a('string');",
									"            pm.expect(this.balance).to.be.a('number');",
									"            pm.expect(this.rateId).to.be.a('number');",
									"            pm.expect(this.links).to.be.an('array');",
									"            return true;",
									"        }catch(err){",
									"            console.log('Account.valid(): Error - ' + err);",
									"            console.log('accountObj',accountObj);",
									"            return false;",
									"        }",
									"    }",
									"    setGlobalsFor(req){",
									"        let props;",
									"        switch(req){",
									"            case 'rateRequest': props = [ \"rateId\" ]; break;",
									"            case 'transactionsRequest': props = [ \"accountId\" ]; break;",
									"        }",
									"        props.forEach(property => {",
									"            this[property] && pm.globals.set(property,this[property]);",
									"        });",
									"    }",
									"}",
									"",
									"var User = class {",
									"    constructor({globVar, name, password} = {globVar: \"\", name: \"\", password:\"\"}){",
									"        if(!globVar) throw new Error('User.constructor(): Missing value globVar'); // must have a globVar",
									"        // check for, & load from globals",
									"        const JSONStr = pm.globals.has(globVar) && pm.globals.get(globVar);",
									"        JSONStr && Object.assign(this,JSON.parse(JSONStr));",
									"        ",
									"        this._globVar = globVar; // the name of the global variable with which to store this user",
									"        ",
									"        // allow name and password to be provided to constructor, or leave them unchanged",
									"        this._name = name || this._name;",
									"        this._password = password || this._password;",
									"        ",
									"        this.save();",
									"    }",
									"    save(){",
									"        pm.globals.set(this._globVar,JSON.stringify(this));",
									"        debugging && console.log('User(' + this.name + ') & saved to globals', this);",
									"    }",
									"    ",
									"    set sessionId(newSessionId){",
									"        !newSessionId && console.log('User.sessionId(newSessionId): Missing newSessionId value');",
									"        if(!this._sessionId){",
									"            this._sessionId = newSessionId;",
									"            this.save();",
									"        }else{",
									"            console.log('User.sessionId(newSessionId): Attempting to set the session Id more than once');",
									"        }",
									"        ",
									"        //always set the global sessionId, it is used in every protected route",
									"        this.sessionId && pm.globals.set('sessionId',this.sessionId);",
									"    }",
									"    get sessionId() {return this._sessionId;}",
									"    clearSession() {",
									"        if(this._sessionId){",
									"            delete this._sessionId;",
									"            this.save();",
									"        }",
									"    }",
									"    ",
									"    get name() {return this._name;}",
									"    set name(val) {console.log('Only set the name when constructing user');}",
									"",
									"    get password() {return this._password;}    ",
									"    set password(val) {console.log('Only set the password when constructing user');}",
									"    ",
									"    setGlobalsFor(req){",
									"        let props;",
									"        switch(req){",
									"            case 'login': props = [ \"name\", \"password\", \"sessionId\" ]; break;",
									"            case 'protectedRequests': props = [ \"sessionId\" ]; break;",
									"        }",
									"        props.forEach(property => {",
									"            this['_'+property] && pm.globals.set(property,this['_'+property]);",
									"        });",
									"    }",
									"    ",
									"    handleLoginResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        try{ var resp = response.json();} catch(err){console.log('Error: JSON Conversion error - ' + err );} ",
									"        let user = this;",
									"        ",
									"        pm.test(\"Login response code is 200\", function () {",
									"            response.to.have.status(200);",
									"",
									"            pm.test(\"Login response contains sessionId\", function () {",
									"                pm.expect(resp.sessionId).to.be.a('string');",
									"                user.sessionId = resp.sessionId;",
									"            });",
									"            ",
									"        });",
									"    }",
									"    ",
									"    handleLogoutResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        let user = this;",
									"        ",
									"        pm.test(\"Logout response code is 204\", function () {",
									"            response.to.have.status(204);",
									"            user.clearSession();",
									"        });",
									"    }",
									"    ",
									"    selectNewRandom(){",
									"        const usersList = [",
									"            ['John','Password123'],",
									"            ['Jane','Password123'],",
									"            ['Janice','Password123'],",
									"            ['Jason','Password123']",
									"        ];",
									"        //select random set of creds from above list",
									"        const credentials = usersList[Math.floor(Math.random() * usersList.length)];",
									"        ",
									"        this.clearSession();",
									"        var newUser = new User({globVar: 'currentUser', name:credentials[0], password:credentials[1]});",
									"        Object.assign(this,newUser);",
									"        return this;",
									"    }",
									"}; // end User class",
									"",
									"var currentUser = new User({globVar: 'currentUser'});",
									"currentUser.setGlobalsFor('protectedRequests'); //always load the current user's sessionId",
									"",
									"`); //end of code library, an x is ok here whilst editing"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7349df2-a927-4566-b22c-b0ca6142aa8e",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"currentUser.handleLoginResponse(pm.response);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d33442a7-c5f0-493f-b83f-7c70bf4cb17f",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"//var currentUser = new User({ \"globVar\": \"currentUser\", \"name\":\"Grace Hopper\", \"password\": \"Password123\" });",
									"var currentUser = new User({ \"globVar\": \"currentUser\" }).selectNewRandom();",
									"",
									"currentUser.setGlobalsFor('login');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{name}}\",\n\t\"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a5cd74f-3b81-47c3-ad69-5f82cb3d23ac",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"currentUser.handleLogoutResponse(pm.response);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "69b8a10a-c478-4ea8-b7ca-46fbc5e3c5a9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "codeLibrary with POMs",
			"item": [
				{
					"name": "Code Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7af6ad5-8383-4a71-b270-b2af23a1e4c6",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"pm.test(\"API is up\", function () {",
									"    pm.response.to.have.status(200);",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.APIstatus).to.eql('up');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "08460c54-708b-4e3a-add3-ae9259b61b37",
								"exec": [
									"pm.globals.set(`codeLibrary`,`",
									"; //=== Code Library === (an x is ok here whilst editing)",
									"// put a backtick beginning of the line above for syntax highlighting",
									"// but remove it before running it",
									"const debugging = true;",
									"",
									"function checkInfoResponse(){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"response contains info\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.info).to.be.an('array');",
									"        resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"    pm.test(\"response contains list of requests\", function () {",
									"        const resp = pm.response.json(); //this can throw exceptions",
									"        pm.expect(resp.requests).to.be.an('array');",
									"        resp.requests.forEach(line => {pm.expect(line).to.be.a('string')});",
									"    });    ",
									"}",
									"",
									"class Account {",
									"    constructor(accountObj){",
									"        if(!accountObj) throw new Error('Account.constructor(): Missing accountObj'); // must have an accountObj",
									"        Object.assign(this,accountObj);",
									"    }",
									"    valid() {",
									"        try{",
									"            pm.expect(this.accountId).to.be.a('number');",
									"            pm.expect(this.type).to.be.oneOf(['cheque','savings','overdraft','loanFixed12Months','loanFixed24Months']);",
									"            pm.expect(this.number).to.be.a('string').and.have.lengthOf(22);",
									"            pm.expect(this.name).to.be.a('string');",
									"            pm.expect(this.balance).to.be.a('number');",
									"            pm.expect(this.rateId).to.be.a('number');",
									"            pm.expect(this.links).to.be.an('array');",
									"            return true;",
									"        }catch(err){",
									"            console.log('Account.valid(): Error - ' + err);",
									"            console.log('accountObj',accountObj);",
									"            return false;",
									"        }",
									"    }",
									"    setGlobalsFor(req){",
									"        let props;",
									"        switch(req){",
									"            case 'rateRequest': props = [ \"rateId\" ]; break;",
									"            case 'transactionsRequest': props = [ \"accountId\" ]; break;",
									"        }",
									"        props.forEach(property => {",
									"            this[property] && pm.globals.set(property,this[property]);",
									"        });",
									"    }",
									"}",
									"",
									"var User = class {",
									"    constructor({globVar, name, password} = {globVar: \"\", name: \"\", password:\"\"}){",
									"        if(!globVar) throw new Error('User.constructor(): Missing value globVar'); // must have a globVar",
									"        // check for, & load from globals",
									"        const JSONStr = pm.globals.has(globVar) && pm.globals.get(globVar);",
									"        JSONStr && Object.assign(this,JSON.parse(JSONStr));",
									"        ",
									"        this._globVar = globVar; // the name of the global variable with which to store this user",
									"        ",
									"        // allow name and password to be provided to constructor, or leave them unchanged",
									"        this._name = name || this._name;",
									"        this._password = password || this._password;",
									"        ",
									"        // cast object properties to their respective classes",
									"        if(this._accounts && Array.isArray(this._accounts)){",
									"            this._accounts = this._accounts.map(accountObj => new Account(accountObj));",
									"        }else{",
									"            this._accounts = [];",
									"        }",
									"        this.save();",
									"    }",
									"    save(){",
									"        pm.globals.set(this._globVar,JSON.stringify(this));",
									"        debugging && console.log('User(' + this.name + ') & saved to globals', this);",
									"    }",
									"    ",
									"    set sessionId(newSessionId){",
									"        !newSessionId && console.log('User.sessionId(newSessionId): Missing newSessionId value');",
									"        if(!this._sessionId){",
									"            this._sessionId = newSessionId;",
									"            this.save();",
									"        }else{",
									"            console.log('User.sessionId(newSessionId): Attempting to set the session Id more than once');",
									"        }",
									"        ",
									"        //always set the global sessionId, it is used in every protected route",
									"        this.sessionId && pm.globals.set('sessionId',this.sessionId);",
									"    }",
									"    get sessionId() {return this._sessionId;}",
									"    clearSession() {",
									"        if(this._sessionId){",
									"            delete this._sessionId;",
									"            this.save();",
									"        }",
									"    }",
									"    ",
									"    get name() {return this._name;}",
									"    set name(val) {console.log('Only set the name when constructing user');}",
									"",
									"    get password() {return this._password;}    ",
									"    set password(val) {console.log('Only set the password when constructing user');}",
									"    ",
									"    setGlobalsFor(req){",
									"        let props;",
									"        switch(req){",
									"            case 'login': props = [ \"name\", \"password\", \"sessionId\" ]; break;",
									"            case 'protectedRequests': props = [ \"sessionId\" ]; break;",
									"        }",
									"        props.forEach(property => {",
									"            this['_'+property] && pm.globals.set(property,this['_'+property]);",
									"        });",
									"    }",
									"    ",
									"    handleLoginResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        try{ var resp = response.json();} catch(err){console.log('Error: JSON Conversion error - ' + err );} ",
									"        let user = this;",
									"        ",
									"        pm.test(\"Login response code is 200\", function () {",
									"            response.to.have.status(200);",
									"",
									"            pm.test(\"Login response contains sessionId\", function () {",
									"                pm.expect(resp.sessionId).to.be.a('string');",
									"                user.sessionId = resp.sessionId;",
									"            });",
									"            ",
									"        });",
									"    }",
									"    ",
									"    handleLogoutResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        let user = this;",
									"        ",
									"        pm.test(\"Logout response code is 204\", function () {",
									"            response.to.have.status(204);",
									"            user.clearSession();",
									"        });",
									"    }",
									"    ",
									"    selectNewRandom(){",
									"        const usersList = [",
									"            ['John','Password123'],",
									"            ['Jane','Password123'],",
									"            ['Janice','Password123'],",
									"            ['Jason','Password123']",
									"        ];",
									"        //select random set of creds from above list",
									"        const credentials = usersList[Math.floor(Math.random() * usersList.length)];",
									"        ",
									"        this.clearSession();",
									"        var newUser = new User({globVar: 'currentUser', name:credentials[0], password:credentials[1]});",
									"        Object.assign(this,newUser);",
									"        return this;",
									"    }",
									"",
									"    get accounts() {return this._accounts;}",
									"    clearAccounts(){ this._accounts = []; this.save();}",
									"",
									"    getRandomAccount(){",
									"        return this.accounts[Math.floor(Math.random() * this.accounts.length)];",
									"    }",
									"",
									"    handleGetAccountsResponse(response){",
									"        if(!response) throw new Error('Error: User.handleLoginResponse() - missing response parameter');",
									"        ",
									"        try{ var resp = response.json();} catch(err){console.log('Error: JSON Conversion error - ' + err );} ",
									"        let user = this;",
									"        ",
									"        pm.test(\"GetAccounts response code is 200\", function () {",
									"            response.to.have.status(200);",
									"            ",
									"            pm.test(\"GetAccounts response contains array of valid accounts\", function () {",
									"                pm.expect(resp).to.be.an('array');",
									"                user.clearAccounts();",
									"                resp.forEach((receivedAccount) => {",
									"                    let account = new Account(receivedAccount);",
									"                    pm.expect(account.valid()).to.be.true;",
									"                    user.accounts.push(new Account(account));",
									"                });",
									"                ",
									"                user.save();",
									"            });",
									"            ",
									"        });",
									"",
									"    }",
									"}; // end User class",
									"",
									"var currentUser = new User({globVar: 'currentUser'});",
									"currentUser.setGlobalsFor('protectedRequests'); //always load the current user's sessionId",
									"",
									"`); //end of code library, an x is ok here whilst editing",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/status",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16536f56-1dd4-493d-8d9c-2630fce6f36e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.info).to.be.an('array');",
									"    resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"}); //*/",
									"",
									"/*",
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"checkInfoResponse(); //*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "rates/info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "785dc7da-943b-4a3f-b376-6c79a440c214",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.info).to.be.an('array');",
									"    resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rates/info",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rates",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4c7628b-2b76-42ae-81e6-04e5a458ff5b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// check each rate is valid",
									"pm.test(\"All rate objects are valid\", function () {",
									"    const rates = pm.response.json(); //this can throw exceptions",
									"    ",
									"    rates.forEach(rate => {",
									"        pm.expect(rate.rateId).to.be.a('number');",
									"        pm.expect(rate.accountType).to.be.oneOf(['cheque','savings','overdraft','loanFixed12Months','loanFixed24Months']);",
									"        pm.expect(rate.rate).to.be.a('number').and.be.within(0,100);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rates",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "person route Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50eec55e-6189-4b72-9707-30c27536bea2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.info).to.be.an('array');",
									"    resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"});",
									"pm.test(\"response contains requests\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.requests).to.be.an('array');",
									"    resp.requests.forEach(line => {pm.expect(line).to.be.a('string')});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/person",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "person login route info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73135a92-02b0-4e64-9ee0-db47edf98bba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response contains info\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.info).to.be.an('array');",
									"    resp.info.forEach(line => {pm.expect(line).to.be.a('string')});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb2f8c7a-25e8-434b-8552-0ad77f726a26",
								"exec": [
									"/*pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login response contains sessionId\", function () {",
									"    const resp = pm.response.json(); //this can throw exceptions",
									"    pm.expect(resp.sessionId).to.be.a('string');",
									"});//*/",
									"",
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"currentUser.handleLoginResponse(pm.response);",
									"//*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "12208b8f-a277-4ca5-a9b3-6805ba2625dc",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"//var currentUser = new User({ \"globVar\": \"currentUser\", \"name\":\"Grace Hopper\", \"password\": \"Password123\" });",
									"var currentUser = new User({ \"globVar\": \"currentUser\" }).selectNewRandom();",
									"",
									"currentUser.setGlobalsFor('login');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"{{name}}\",\n\t\"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User's accounts List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e76adade-c7c4-4897-896a-227192782957",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"currentUser.handleGetAccountsResponse(pm.response);",
									"//*/",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/accounts",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "One Rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "305b23bf-183a-4169-884d-022b68716e5e",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"currentUser.getRandomAccount().setGlobalsFor(`rateRequest`);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostURL}}/api/v1/rate/{{rateId}}",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"rate",
								"{{rateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "One user's account's transactions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "357eba1e-6d7c-4340-8a6b-2665c1e07cfb",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"currentUser.getRandomAccount().setGlobalsFor(`transactionsRequest`);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/account/{{accountId}}/transactions",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"account",
								"{{accountId}}",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "475e11f4-7d90-4cc0-a755-913cec3adc9b",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									"",
									"currentUser.handleLogoutResponse(pm.response);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20e10de4-a77c-4581-90a6-3b95e748073b",
								"exec": [
									"pm.globals.has(`codeLibrary`) && eval(pm.globals.get(`codeLibrary`)); //warning symbol is expected here",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionid",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostURL}}/api/v1/person/login",
							"host": [
								"{{hostURL}}"
							],
							"path": [
								"api",
								"v1",
								"person",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}